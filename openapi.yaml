openapi: "3.0.3"
info:
  title: "tama-connection"
  version: "1.0.0"
servers:
  - url: "http://localhost:5000"
    description: "ローカル環境"
  - url: "http://tk2-123-61896.vs.sakura.ne.jp/api/"
    description: "本番環境"
tags: 
  - name: "user"
    description: "ユーザーに関する操作"
  - name: "page"
    description: "投稿ページに関する操作"
paths:
  "/"
    get:
      summary: "テスト用"
      tags: []
      deprecated: false
      responses: 
        "200":
          description: "テスト"
          content: 
            "application/json":
              schema:
                type: object
                properties:
                  hello:
                    "Hello World"               
  "/pages"
    get: 
      summary: 投稿されたページを複数取得
      tags: ["page"]
      deprecated: false
      parameters:
        - name: tag
          in: query
          requierd: true
          schema: { type: "kankou" | "gurume" | "omiyage" | "tamasanpo"}
        - name: pageNum
          in: query
          requier: true
          schema: { type: integer}
      responses:
        "200":
          content:
            "application/json"
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        page_id:
                          type: integer
                        title:
                          type: string
                        tag:
                          type: string # kankou or gurume or tamasanpo or omiyage
                        user:
                          type: integer
                        location: 
                          type: object
                          properties:
                            x:
                              type: integer
                            y:
                              type: integer
                        image:
                          type: string # 画像データ(BASE64)
                  max:
                    type: object
                    properties:
                      kankou:
                        type: integer
                      gurume:
                        type: integer
                      tamasanpo:
                        type: tnteger
                      omiyage:
                        type: integer
  "/page/{page_id}"
    get:
      description: 投稿されたページを1つ取得
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "application/json":
              schema:
                type: object
                properties:
                  page_id:
                    type: integer
                  title:
                    type: string
                  tag:
                    type: string # kankou or gurume or tamasanpo or omiyage
                  user:
                    type: integer
                  location: 
                    type: object
                    properties:
                      x:
                        type: number
                      y:
                        type: number
                  image:
                    type: string # 画像データ(BASE64)
    put:
      description: 投稿データの更新
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
        - name: token
          in: heder
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              title:
                type: string
              tag:
                type: string # kankou or gurume or tamasanpo or omiyage
              text:
                type: string
              location:
                type: object
                properties:
                  x:
                    type: number
                  y:
                    type: number
              image:
                type: string # 画像データ(BASE64)
      responses:
        "200":
          description:
          content:
            "aplication/json":
              schema:
                type: integer # 投稿データの番号
    delete:
      description: 投稿データの削除
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
          content:
            "application/json":
              schema:
                type: integer # 削除した投稿データのID
  "/page"
    post:
  "/map"
    get:
      description: 位置情報の取得
      parameters:
        - name: myx
          in: query
          required: true
          schema: { type: number }
        - name: myy
          in: query
          required: true
          schema: { type: number }
      responses:
        "200":
          content:
            "application/json":
              schema:
                type: object
                properties:
                  page_count:
                    type: integer
                  locations:
                    type: array
                    items:
                      type: object
                      properties:
                        location:
                          type: object
                          properties:
                            x:
                              type: number
                            y:
                              type: number
                        page_id:
                          type: integer
  "/regist"
    post:
      description: ユーザーの登録
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        "200":
          content:
            "application/json":
              schema:
                type: object
                properties:
                  token:
                    type: string # JWT
  "/login"
    post:
      description: ユーザーのログイン
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                user:
                  type: string
                password:
                  type: string
      responses:
        content:
          "application/json":
            schema:
              type: object
              properties:
                token:
                  type: string # JWT
  "/user"
    get:
      description: ユーザー情報の取得
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string # JWT
          description: ユーザーID
      responses:
        "200":
          content:
            "application/json":
              schema:
                type: object
                properties:
                  name:
                    type: string
                  checked:
                    type: array
                    items:
                      type: integer
                  files:
                    type: array
                    items:
                      type: integer
    put:
      description: お店のメダルを追加する
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string # JWT
      responseBody:
        content:
          "application/json":
            schema:
              type: object
              properties: 
                shop_id:
                  type: integer
      responses:
        content:
          "application/json":
            schema:
              type: string

    